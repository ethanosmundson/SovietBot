/*
 * This file is generated by jOOQ.
*/
package rr.industries.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import rr.industries.jooq.DefaultSchema;
import rr.industries.jooq.Indexes;
import rr.industries.jooq.tables.records.GlobaltagsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Globaltags extends TableImpl<GlobaltagsRecord> {

    private static final long serialVersionUID = 539906189;

    /**
     * The reference instance of <code>globaltags</code>
     */
    public static final Globaltags GLOBALTAGS = new Globaltags();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GlobaltagsRecord> getRecordType() {
        return GlobaltagsRecord.class;
    }

    /**
     * The column <code>globaltags.tagname</code>.
     */
    public final TableField<GlobaltagsRecord, String> TAGNAME = createField("tagname", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>globaltags.tagcontent</code>.
     */
    public final TableField<GlobaltagsRecord, String> TAGCONTENT = createField("tagcontent", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>globaltags</code> table reference
     */
    public Globaltags() {
        this(DSL.name("globaltags"), null);
    }

    /**
     * Create an aliased <code>globaltags</code> table reference
     */
    public Globaltags(String alias) {
        this(DSL.name(alias), GLOBALTAGS);
    }

    /**
     * Create an aliased <code>globaltags</code> table reference
     */
    public Globaltags(Name alias) {
        this(alias, GLOBALTAGS);
    }

    private Globaltags(Name alias, Table<GlobaltagsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Globaltags(Name alias, Table<GlobaltagsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.GLOBALTAGINDEX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Globaltags as(String alias) {
        return new Globaltags(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Globaltags as(Name alias) {
        return new Globaltags(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Globaltags rename(String name) {
        return new Globaltags(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Globaltags rename(Name name) {
        return new Globaltags(name, null);
    }
}
